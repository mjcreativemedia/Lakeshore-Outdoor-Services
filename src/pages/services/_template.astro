---
import Base from "../../layouts/Base.astro";
import SEO from "../../components/SEO.astro";
import JsonLd from "../../components/JsonLd.astro";
import { BUSINESS, phone_e164 } from "../../data/business";

type FAQ = {
  question: string;
  answer: string;
  answerHtml?: string;
};

export interface Props {
  title: string;
  description: string;
  serviceName: string;
  city?: string;
  area?: string;
  internalLinks?: Array<{ href: string; label: string; description?: string }>;
  faqs?: FAQ[];
  faqHeading?: string;
}

const {
  title,
  description,
  serviceName,
  city,
  area,
  internalLinks = [],
  faqs = [],
  faqHeading = `${serviceName} FAQs`,
} = Astro.props;
const canonical = new URL(Astro.url.pathname, BUSINESS.site).toString();
const seoTitle = `${title} | ${BUSINESS.name}`;
const locationName = city ?? area ?? BUSINESS.address.city;
const providerAddress = {
  "@type": "PostalAddress",
  addressLocality: BUSINESS.address.city,
  addressRegion: BUSINESS.address.region,
  addressCountry: BUSINESS.address.country,
};

const localBusinessSchema = {
  "@context": "https://schema.org",
  "@type": ["LocalBusiness", "ServiceAreaBusiness"],
  "@id": `${BUSINESS.site}/#business`,
  name: BUSINESS.name,
  telephone: phone_e164,
  email: BUSINESS.email,
  url: BUSINESS.site,
  areaServed: BUSINESS.areasServed,
  address: providerAddress,
};

const serviceSchema = {
  "@context": "https://schema.org",
  "@type": ["SnowRemovalService", "Service"],
  name: `${serviceName} | ${BUSINESS.name}`,
  description,
  areaServed: locationName,
  serviceArea: {
    "@type": "AdministrativeArea",
    name: locationName,
  },
  provider: {
    "@id": `${BUSINESS.site}/#business`,
  },
  serviceType: serviceName,
  url: canonical,
};

const faqSchema =
  faqs.length > 0
    ? {
        "@context": "https://schema.org",
        "@type": "FAQPage",
        mainEntity: faqs.map((faq) => ({
          "@type": "Question",
          name: faq.question,
          acceptedAnswer: {
            "@type": "Answer",
            text: faq.answer,
          },
        })),
      }
    : null;

const breadcrumbs = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: `${BUSINESS.site}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Services",
      item: `${BUSINESS.site}/services/`,
    },
    {
      "@type": "ListItem",
      position: 3,
      name: serviceName,
      item: canonical,
    },
  ],
};

const schema = [localBusinessSchema, serviceSchema, ...(faqSchema ? [faqSchema] : []), breadcrumbs];
---
<Base title={seoTitle}>
  <SEO title={seoTitle} description={description} canonical={canonical} type="service" />
  <JsonLd schema={schema} />
  <article class="content">
    <header>
      <p class="eyebrow">{locationName}</p>
      <h1>{title}</h1>
      <p class="lead">{description}</p>
    </header>
    <slot />
    {faqs.length > 0 && (
      <section class="faq">
        <h2>{faqHeading}</h2>
        {faqs.map((faq) => (
          <details>
            <summary>{faq.question}</summary>
            {faq.answerHtml ? (
              <div class="faq-answer" set:html={faq.answerHtml} />
            ) : (
              <p class="faq-answer">{faq.answer}</p>
            )}
          </details>
        ))}
      </section>
    )}
    {internalLinks.length > 0 && (
      <section class="internal-links">
        <h2>Related services</h2>
        <ul>
          {internalLinks.map((link) => (
            <li>
              <a href={link.href}>{link.label}</a>
              {link.description && <p>{link.description}</p>}
            </li>
          ))}
        </ul>
      </section>
    )}
  </article>
</Base>

<style>
  .content {
    margin: 0 auto;
    max-width: 720px;
    padding: 3rem 1.5rem;
    display: grid;
    gap: 2rem;
  }

  .eyebrow {
    text-transform: uppercase;
    letter-spacing: 0.08em;
    font-size: 0.875rem;
    color: #475569;
    margin: 0;
  }

  .lead {
    font-size: 1.125rem;
    line-height: 1.6;
    color: #1f2937;
  }

  .internal-links ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: 1rem;
  }

  .internal-links li {
    background: #e2e8f0;
    padding: 1rem;
    border-radius: 0.75rem;
  }

  .internal-links a {
    font-weight: 600;
  }

  .internal-links p {
    margin: 0.5rem 0 0;
    color: #1f2937;
  }

  .faq {
    display: grid;
    gap: 1rem;
  }

  .faq details {
    background: #f1f5f9;
    border-radius: 0.75rem;
    padding: 1rem 1.25rem;
  }

  .faq summary {
    cursor: pointer;
    font-weight: 600;
  }

  .faq-answer {
    margin: 0.75rem 0 0;
    line-height: 1.6;
  }
</style>
